<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: C++ | 曲奕帆ghost]]></title>
  <link href="http://ghostqu.github.io/blog/categories/c-plus-plus/atom.xml" rel="self"/>
  <link href="http://ghostqu.github.io/"/>
  <updated>2016-02-20T19:12:40+08:00</updated>
  <id>http://ghostqu.github.io/</id>
  <author>
    <name><![CDATA[ghostQu]]></name>
    <email><![CDATA[ghostqu0@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ 我的C++学习笔记 结构与共同体]]></title>
    <link href="http://ghostqu.github.io/blog/2016/02/20/cuexibiji3/"/>
    <updated>2016-02-20T19:10:23+08:00</updated>
    <id>http://ghostqu.github.io/blog/2016/02/20/cuexibiji3</id>
    <content type="html"><![CDATA[<p>在此前我们我们介绍了string类的使用方法，今天我们继续介绍其他数据类型，结构和共同体。</p>

<!--more-->


<hr />

<h3>1.定义</h3>

<p><strong>结构</strong>关键字为<code>struct</code>，主要用于<strong>存储<em>多个</em>不同类型变量</strong>的不同信息，注意这里的多个，这个是跟共同体的主要区别。举例说明，假如我们居委会要做一个附近人口信息表，表内包括姓名，年龄和身份证后四位，如果按照一般的方法我们要准备一个二维数组或者字符串数组和两个<code>int</code>数组，然而三个数组背后意味着修改查询信息的不方便，我们希望所有的信息能够存储到一起，那么<code>struct</code>可以做到这一切，同时<code>struct</code>也为之后的类打下了基础。</p>

<p>结构的定义方法如下</p>

<p><code>
struct 结构名
{
 //成员列表
}；
</code></p>

<p>以上面那个人口信息为例如下</p>

<p><code>
struct peopleInfor
{
char name[20];
int age;
int id;
}；
</code>
但是需要注意一点，这里只是对<code>peopleInfor</code>这个结构类型进行定义，而不是声明了某个变量<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>。那么我们还要声明变量才能够使用，值得一提的是，在C++中结构变量声明时可以省略<code>struct</code>关键字并且可以声明结构数组，即以下两种声明方法都没有问题。</p>

<p><code>
struct peopleInfor infoData[20];
peopleInfor inforData[20]
</code></p>

<p><strong>共用体</strong>是一种数据格式，关键字为<code>union</code>，它能够<strong>储存不同变量类型的一个信息</strong>，即不同于一个结构中可以包含多个信息，一个共用体中只能包含一个信息，只不过这个信息可以以不同的数据类型来储存。举例来说当我们用共用体来存储身份证后四位时，我们可以选择是以字符串类型存储还是以整型类型存储，这样能极大的节省内存。</p>

<p>其定义方式如下
<code>
union idInfor
{
 int intId;
 char charID[20]
};
</code>
当然，这个只是定义数据类型，我们还是要声明变量的，但是如下的声明方法在C++中同样适用，这表明我们在定义的同时声明了一个名为id的变量。值得一提的是，重复给共同体中两个类型赋值，只会保留最后输入的值和类型。</p>

<p><code>
union idInfor
{
 int intId;
 char charID[20]；
}id;
</code></p>

<hr />

<h3>2.程序及解析</h3>

<p>列出一个附近居民的信息表，包括姓名，年龄和身份证后四位，要求初始化两组，输入第三组，并且输出第一个人的姓名，第二人年龄和第三人的后四位。</p>

<p>```
//04.cpp struct and union</p>

<h1>include <iostream></h1>

<h1>include <string></h1>

<p>struct familyMember
{</p>

<pre><code>std::string name;
int age;
 union idInfor
 {
  int intId;
  char charID[20];
 }id;
};
</code></pre>

<p>int main()
{</p>

<pre><code>using namespace std;

familyMember fB[3] = 
{
    {"Mr.Q",
        24,
        1314},

    {"Miss.Y",
        22,
        9716}
    };

    cout&lt;&lt;"Please input the third member's name"&lt;&lt;endl;
    cin&gt;&gt; fB[2].name;

    cout&lt;&lt;"Please input the third member's age"&lt;&lt;endl;
    cin&gt;&gt; fB[2].age;

    cout&lt;&lt;"Please input the third member's id"&lt;&lt;endl;
    cin&gt;&gt; fB[2].id.charID;

    cout&lt;&lt;"the first person is "&lt;&lt;fB[0].name
        &lt;&lt;" and the second's age is "&lt;&lt;fB[1].age
        &lt;&lt;" ,the the third's id is "&lt;&lt;fB[2].id.charID&lt;&lt;endl;


return 0;
}
</code></pre>

<p><code>
程序运行结果如下
</code>
Please input the third member&rsquo;s name
Baby.Q
Please input the third member&rsquo;s age
2
Please input the third member&rsquo;s id
12XX
the first person is Mr.Q and the second&rsquo;s age is 22 ,the the third&rsquo;s id is 12XX</p>

<hr />

<p>(program exited with code: 0)
Press return to continue</p>

<p><code>
这里注意几个问题，首先，我们可以像初始化数组一样初始化结构。其次，我们可以用成员运算符`.`来访问结构中的各个成员，这种方法在日后的类中会经常使用的。
最后，我们要讨论一下共用体初始化的规则，先上程序。
</code>
//04.cpp struct and union</p>

<h1>include <iostream></h1>

<h1>include <string></h1>

<p>union idInfor
   {</p>

<pre><code> int intId;
 char charID;
</code></pre>

<p>   };</p>

<p>int main()
{</p>

<pre><code>using namespace std;
</code></pre>

<p>   idInfor id={123};</p>

<p>   cout&lt;&lt;id.intId&lt;&lt;endl;
   cout&lt;&lt;id.charID&lt;&lt;endl;</p>

<p>   idInfor id2={.charID=&lsquo;0&rsquo;};</p>

<p>   cout&lt;&lt;id2.charID&lt;&lt;endl;</p>

<p>   id2=id;</p>

<p>   cout&lt;&lt;id2.intId&lt;&lt;endl;</p>

<pre><code>return 0;
}
</code></pre>

<p><code>
运行结果如下
</code>
123
{
0
123</p>

<hr />

<p>(program exited with code: 0)
Press return to continue
<code>``
由此可得出共用体的几个规则
（1）同一个内存段可以用来存放几种不同类型的成员，但是在每一瞬间只能存放其中的一种，而不是同时存放几种。换句话说，每一瞬间只有一个成员起作用，其他的成员不起作用，即不是同时都在存在和起作用。共用体变量中起作用的成员是最后一次存放的成员，在存入一个新成员后，原有成员就失去作用。
（2）共用体可以以类似</code>idInfor id={123};<code>或类似</code>idInfor id2={.charID=&lsquo;0&rsquo;};`的方法初始化，只不过第一个方法是初始化默认类型，即第一个类型，而第二种方法可以初始化指定类型。</p>

<hr />

<p>以上纯属个人观点，欢迎大家指正，如果有什么地方令您不满，请尽快告知，鄙人会酌情判断进行修改。若修改后鄙人观点还是令您不悦——你咬我啊。(╯°Д°)╯︵ ┻━┻</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>即<code>peopleInfor</code>本身是像<code>int</code>这样的数据类型，而不是我们声明的变量。<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我的C++学习笔记 string类]]></title>
    <link href="http://ghostqu.github.io/blog/2016/02/20/xuexibiji4/"/>
    <updated>2016-02-20T19:08:13+08:00</updated>
    <id>http://ghostqu.github.io/blog/2016/02/20/xuexibiji4</id>
    <content type="html"><![CDATA[<p>上一篇笔记结合输入输出介绍了数组，今天我们继续输入输出，因为程序的根本就是保证输入的准确和可视化的输出。</p>

<!--more-->


<hr />

<p>1.作业
(1)如果输入一个整型变量，但是输入溢出会发生什么事情，那么我们来做一个实验。
```
// 03.cpp</p>

<h1>include <iostream></h1>

<p>int main()
{
 using namespace std;
 int i;</p>

<p> cout&lt;&lt;&ldquo;please input data:&rdquo;&lt;&lt;endl;
 cin>>i;</p>

<p> cout&lt;&lt;&ldquo;The data is：&rdquo;&lt;&lt;endl;
 cout&lt;&lt;i&lt;&lt;endl;</p>

<p> return 0;
}
<code>
那么我们来看看输出结果：
</code>
please input data:
65537
The data is：
65537
请按任意键继续&hellip;
```
看到这里肯定有童靴说了，哇，竟然没有溢出，好厉害好厉害。当然我一开始也是这么想的，但是大家要注意一个问题，就是整型不一定就是两字节的，它会根据编译器和编译环境的不同而不同，我们可以通过调用库函数，或者查看底层的方式获取这些数据类型长度的信息，这里暂时不做介绍。那么为了保证实验的准确性，我们再输入一次。</p>

<p><code>
please input data:
10000000000000000000000000000
The data is：
-858993460
请按任意键继续. . .
</code>
大家看到了数据还是溢出了，只不过因为我的编译环境的问题，我的int不是两字节的，当数据溢出时，本来是正数的数据因为强制进位导致标志位变为1，因此变为负数的最大值。</p>

<p>2.太简单了，本宝宝不做</p>

<hr />

<p>2.定义及程序</p>

<p>愉快并且任性的结束了作业部分，本宝宝又要快乐的给大家讲定义了，鉴于本宝宝今天在上午下雨下午下雪的情况下练了一天车，现在已经冻得意思模糊了，宝宝心里苦，宝宝不说，因此，今天的定义就和程序结合在一起讲解。</p>

<p>string类</p>

<p>这是IOS/ANSI　C++98标准中扩展的C++库，它的主要作用就是代替char型数组来储存字符串，本质上它减少了程序员对于数组定义的工作，但是又能通过类来实现数组该有的功能。</p>

<p>废话不多说，上例程：</p>

<p>```
// 03.cpp</p>

<h1>include <iostream></h1>

<h1>include <string></h1>

<p>int main()
{
 using namespace std;</p>

<p> char asArray[20];
 string asString,asString1;</p>

<p> cout&lt;&lt;&ldquo;please input string store as array:&rdquo;&lt;&lt;endl;
 cin>>asArray;</p>

<p> cout&lt;&lt;&ldquo;please input string store as string:&rdquo;&lt;&lt;endl;
 cin>>asString;</p>

<p> asString1=asString;</p>

<p> cout&lt;&lt;&ldquo;The array is：&rdquo;&lt;&lt;endl;
 cout&lt;&lt;asArray&lt;&lt;endl;</p>

<p> cout&lt;&lt;&ldquo;The string is：&rdquo;&lt;&lt;endl;
 cout&lt;&lt;asString1&lt;&lt;endl;</p>

<p> cout&lt;&lt;&ldquo;The third letter of array is：&rdquo;&lt;&lt;endl;
 cout&lt;&lt;asArray[2]&lt;&lt;endl;</p>

<p> cout&lt;&lt;&ldquo;The third letter of string is：&rdquo;&lt;&lt;endl;
 cout&lt;&lt;asString1[2]&lt;&lt;endl;
 return 0;
}
<code>
输出结果如下
</code>
please input string store as array:
thing
please input string store as string:
some
The array is：
thing
The string is：
some
The third letter of array is：
i
The third letter of string is：
m
请按任意键继续&hellip;
```
用起来是不是跟数组很相似呢？同样都是可以用数组的方式单独输出某一个字符。但是大家注意一点，在这个程序中string类是可以相互赋值的，这个是数组做不到的，同样当你定义string类时，你不需要像数组那样预先定义好长度，这就是string类的优势。</p>

<p>那么当我们使用string类时有什么要注意的呢？</p>

<p>首先，当你使用string类时一定要调用相应头文件，即<code>#include &lt;string&gt;</code>。而string类位于名称空间std中，因此我们必须使用一个<code>using namespace std;</code>编译指令或者使用<code>std::string</code>来引用它。</p>

<p>其次，当我们使用string类时，我们不管可以让两个string类相互赋值，还可以相加，即<code>string3=string2+string1；</code>，这相当于将两个字符串合并起来，即字符串2后面接上字符串1，同理也可以使用+=。</p>

<p>最后给出两个用来测量字符串和数组长度的函数及使用方法：</p>

<p><code>
int lenString = asString.size();
int lenAaary = strlen(asArray);
</code></p>

<hr />

<p>以上纯属个人观点，欢迎大家指正，如果有什么地方令您不满，请尽快告知，鄙人会酌情判断进行修改。若修改后鄙人观点还是令您不悦——你咬我啊。(╯°Д°)╯︵ ┻━┻</p>

<hr />

<p>作业：</p>

<p>1.使用C的方式，即数组，合并两个字符串，并测量字符串长度。
2.修改上次作业中的错误，让程序能够识别任意一段没有换行符的字符串，我可能会摘录一段莎士比亚文选，请做好准备。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我的C++学习笔记2]]></title>
    <link href="http://ghostqu.github.io/blog/2016/02/04/c-plus-plus-xue-xi-bi-ji-er/"/>
    <updated>2016-02-04T23:10:09+08:00</updated>
    <id>http://ghostqu.github.io/blog/2016/02/04/c-plus-plus-xue-xi-bi-ji-er</id>
    <content type="html"><![CDATA[<p>昨天讲了程序的格式化输出，今天继续上文，即程序的输入部分，首先我们还是继续来讲解一些定义。</p>

<!--more-->


<hr />

<h2>1.定义和概念</h2>

<p><strong>数组(array)</strong>是一种数据格式，作用是储存多个相同类型的值。当我们要声明一个数组时要指出以下三点，数组类型，数组名和数组中的元素数。声明数组的通用格式如下<code>typeName arrayName[arraySize];</code>其中数组长度arraySize必须为整型常数或const值，也可以是常量表达式<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>，换句话说，arraySize的数值在编译之前必须是确定已知的。</p>

<p><strong>注意:</strong>数组内元素是可以单独调用的，但是使用时需要注意一点，数组声明是arraySize是数组长度，但是数组中的元素序号是从0开始的。例如，我们声明一个长度为10的数组<code>int i[10];</code>，数组的元素是0~9而不是1～10;，切记切记。</p>

<p>另一个需要注意的地方是数组的初始化，当我们<strong>定义数组</strong><sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>时我们可以给数组以以下方式赋值<code>int num[4]={1,2,3,4};</code>；当然我们也可以只给一部分元素赋值，例如<code>int num[4]={1,2};</code>和<code>int num[4]={1,,3};</code>前一语句给第1、2号元素赋值，后一句给第1、3号元素赋值，其他没有赋值的元素默认为0；另外我们也可以把数组内所有元素初始化为0，如<code>int num[4]={0};</code>。</p>

<p>这里有一个有趣的情况，当我们用以上方式定义数组时，可以不输入数组长度，即方括号中为空，这时编译器会自动计算数组长度，例如<code>int num[]={1,2,3,4};</code>数组长度为4;。</p>

<p>另外数组之间不能互相赋值，例如：
<code>
int num[4] = {1,2,3,4};
int num1[4] = {0}
num = num1;  //This is an ERROR
</code>
这个是错误的，编译器会报错。</p>

<p><strong>字符串</strong>本质上是一个char型数组，用于存储连续的本本文字。我们有一个非常方便的方式在<strong>声明数组</strong>时将字符串写入，声明方式如下<code>char myName[] = "Mr.Qu";</code>。</p>

<p><strong>注意:</strong>在C++中，所有字符串都是以空字符结尾(即\0)，这个是用来标记字符串结尾的，当我们输入<code>char myName[] = "Mr.Qu";</code>时，编译器隐性的在结尾加入了空字符，因此这个数组的长度为6而不是5。</p>

<p>另有一点有趣的应用大家可以做实验尝试一下，按照以下程序会输出什么？
```</p>

<h1>include <iostream></h1>

<p>int main()
{
 using namespace std;
 char myName[6] = {&rsquo;M',&lsquo;r&rsquo;,&lsquo;.&rsquo;,&lsquo;Q&rsquo;,&lsquo;\0&rsquo;,&lsquo;u&rsquo;};
 char myName1[5] = {&rsquo;M',&lsquo;r&rsquo;,&lsquo;.&rsquo;,&lsquo;Q&rsquo;,&lsquo;u&rsquo;};
 cout &lt;&lt; myName &lt;&lt; endl;
 cout &lt;&lt; myName1 &lt;&lt; endl;
 return 0;
}
```</p>

<hr />

<h2>2.程序及作业</h2>

<p>鉴于从今天开始我只做C++部分的笔记，所以作业我用C++来做。程序要求为正确输入并显示一段有空格的字符串。
```
// 02.cpp &mdash;read one string</p>

<h1>include <iostream></h1>

<p>int main()
{</p>

<pre><code>using namespace std;

const int strLength=100;
char strRead[strLength];

cout &lt;&lt; "Please input the string." &lt;&lt; endl;
//cin &gt;&gt; strRead; //this is wrong
cin.getline(strRead,strLength);

cout &lt;&lt; "The string you just entered is " &lt;&lt; endl
        &lt;&lt; strRead &lt;&lt; endl;

return 0;
}
</code></pre>

<p>```</p>

<p>程序运行结果如下：</p>

<p>```
Please input the string.
I Love You!
The string you just entered is
I Love You!</p>

<hr />

<p>(program exited with code: 0)
Press return to continue</p>

<p>```</p>

<hr />

<h2>3.程序分析</h2>

<p>首先，各位看官肯定发现了一个从未见过的关键字<code>const</code>，<code>const</code>叫做限定符，作用是把<strong>一个对象转化为常量</strong>，在本例中作用类似于<code>#define strLength 100</code>，但是<code>const</code>比<code>define</code>好用，因为它<strong>可以指定类型，可以限定范围，可以用于指针和数组</strong>，当然我们会在后面介绍它的其他功能。</p>

<p>大家可能发现了我程序中注释了一行错误代码<code>cin &gt;&gt; strRead;</code>，那么为什么这个代码是错误的呢？由于我们不能从键盘上输入空字符（\0），cin需要通过其他方式来判断我们是否输入完毕字符串，<strong>C++中cin通过空格、制表符和换行符来确定字符串结尾</strong>，那么当我们输入一串带空格的字符串时，实际上cin值读取到你第一个空格之前的内容，并将其作为字符串存入数组中<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>。</p>

<p>好在C++提供了很强大的类成员函数，其中包括<code>cin.getline()</code>和<code>cin.get()</code>。本次中我们用了<code>cin.getline()</code>，这个函数的作用是<strong>读取整个行，它通过识别换行符来判断字符串是否结束</strong>，并且这个函数是有参数的，第一个参数是用来存储输入行的数组名，第二个是要读取的字符数（n）。<code>cin.getline()</code>在读取到换行符或者是n-1个字符数时停止读取，至于为什么是n-1？是因为最后一个位置要留给\0。</p>

<p><strong>注意:</strong><code>cin.getline()</code>利用换行符来判断字符串是否结束，在读取到换行符时，<code>cin.getline()</code>将换行符替换为空字符并储存在数组末尾。</p>

<p>在介绍下一个函数<code>cin.get()</code>之前，我要提出一个问题，当我们用<code>cin</code>来读取字符串，当输入了空格时<code>cin</code>就结束存储了，那么剩下的字符到哪里了？我们用程序来说话。</p>

<p>```
// 02(1).cpp &mdash;read one string</p>

<h1>include <iostream></h1>

<h1>define strLength 100</h1>

<p>int main()
{</p>

<pre><code>using namespace std;

//const int strLength=100;
char strRead[strLength];
char strRead1[strLength];

cout &lt;&lt; "Please input the string." &lt;&lt; endl;
cin &gt;&gt; strRead;
cin.getline(strRead1,strLength);

cout &lt;&lt; "The string you just entered is " &lt;&lt; endl
        &lt;&lt; strRead &lt;&lt; endl
        &lt;&lt; strRead1 &lt;&lt; endl;

return 0;
}
</code></pre>

<p>```
程序运行结果为：</p>

<p>```
Please input the string.
I Love You!
The string you just entered is
I
 Love You!</p>

<hr />

<p>(program exited with code: 0)
Press return to continue
```</p>

<p>各位童鞋可以明显看出，在空格之后输入的部分并没有消失，它们可以被第二个函数识别并存储。这是因为我们<strong>输入的字符先被存储在系统的缓冲区</strong>，缓冲区可以理解成一个队列，程序实际读取的是这个队列中的内容。</p>

<p>好了，在理解上面的知识之后，我们继续介绍<code>cin.get()</code>，实际上<code>cin.get()</code>跟<code>cin.getline()</code>非常像，只不过<code>cin.get()</code>在读取整行字符之后，不丢弃换行符，而是把它留在缓冲区之中，这意味着如果你要输入两次，第二次调用时<code>cin.get()</code>将无法识别第二次的输入，因为上一次调用后未被丢弃的换行符依旧留在缓冲区中。好在我们有办法解决这个问题，首先，当<code>cin.get()</code>不输入任何参数时<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>可读取下一个字符（不管是换行符、空格还是制表符），其次，还有一个类函数叫做<code>cin.getchar()</code>作用与前面相同，我们可以通过<code>cin.get(strRead1,strLength).get;</code>或者<code>cin.get(strRead1,strLength); cin.get();</code>来调用它们。</p>

<hr />

<p>以上纯属个人观点，欢迎大家指正，如果有什么地方令您不满，请尽快告知，鄙人会酌情判断进行修改。若修改后鄙人观点还是令您不悦——你咬我啊。(╯°Д°)╯︵ ┻━┻</p>

<hr />

<p><strong>作业:</strong>
1.讲述c语言中处理空格的方法。
2.输入以下字符串“Even now, you don&rsquo;t konw HOW MUCH I LOVE YOU”，按照原样显示，并计算其中单词数，字母数和大写字母数。</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>例如<code>sizeof(int)</code>或<code>12*8</code>。<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>注意是定义不是声明，不是声明，不是声明。忘记什么是定义什么是声明的，忘记的同学给你们一个<a href="http://ghostqu.github.io/blog/2016/02/02/c-plus-01/">传送门</a>。<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>作为字符串的意思是在最后一位加上\0。<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
<li id="fn:4">
<p>这里用了函数的重定义。<a href="#fnref:4" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我的C++学习笔记1]]></title>
    <link href="http://ghostqu.github.io/blog/2016/02/02/c-plus-01/"/>
    <updated>2016-02-02T23:57:13+08:00</updated>
    <id>http://ghostqu.github.io/blog/2016/02/02/c-plus-01</id>
    <content type="html"><![CDATA[<p>今天开始正式步入C++的学习中，作为学习笔记，我决定采用先定义再程序再讲解讲解的方式记录，即首先我会讲解一些概念性的问题，然后用一个程序作为实力，在对程序进行讲解。</p>

<!--more-->


<hr />

<h2>1.概念与定义</h2>

<p>我们在今天的学习开始要提及一个规定：</p>

<blockquote><p>对于一个算法，可以没有输入但是不能没有输出。</p></blockquote>

<p>有些童靴可能会觉得奇怪，为什么可以没有输入但是必须有输出？原因如下，可以没有输入的原因是，我们可以在编写程序时，初始化并给某个变量赋值，并不一定要依赖于外部设备的输入；而<strong>如果我们不能知道这个程序算法运行结果如何，这个算法对我们就没有意义</strong>，所以必须要有输出，不过需要注意的是输出并不一定是显示于屏幕的字符，可以是一段声音，一个图形的移动，甚至于在单片机中某个引脚的高低变换。但是作为初学者常用的输出方式，就是在终端中显示字符。因此我们今天将提及C++中用于输入输出的函数。</p>

<p>下面阐述一个重要定义</p>

<p>变量的声明和定义，很多同学都容易把这<strong>两个</strong>概念弄混,注意是两个概念，两个呦。这个两个概念的区别在于一种是需要建立存储空间的，这个叫做“定义性声明（defining declaration）”或者称为“定义（definition）”，如int a；在声明时就已经建立了存储空间，另一种是不需要建立存储空间的，如extern int a;其中变量a是在别的程序中定义的，这个叫做“引用性声明（referncing declaration）”，当然广义来讲，声明是包括定义的，但是并非所有声明都是定义，上面的例子已经很好的说明了这个问题。</p>

<p>那么声明和定义的作用是什么？声明是为了在定义之前能够使用，这个是由编译器的特性决定的，比如说我们编写一个函数，作用是把两个变量相加，但是这个函数位于main函数之后。如果我们不提前声明的话，编译器将无法识别这个函数名导致程序无法通过编译。举个例子，某导演要拍一个电影，他可以说某几段我要做特效（声明），然后后期再把特效组的人请过来（定义），但是如果不提前告知大家这里要做特效（声明），可能剪辑组的人在不知情的情况下，就会将整个影片错误剪辑（不能正常运行）。因此，同一个变量或者函数，可以声明多次，但是只可以定义一次（毕竟只能请一个特效组）。</p>

<p>整型：C++中用于存储整数的变量类型，C++中整型包括long、unsigned long、int、unsigned int、short、unsigned short、char、unsigned char和bool。C++11中又新增了两个整型分别是long long和unsigned long long。
有趣的是C++对于这个变量类型的长度规定十分灵活，其中short必须保证两字节，即16位；int至少于short一样长；long至少四个字节，即32位且至少与int一样长；long long至少八个字节，即64位且至少与long一样长。这意味着在不同的编译器中，整型的长度可能不同，有兴趣的同学可以多装几个编译器做个实验。</p>

<p>这里需要注意的整形的取值范围，以16位int为例，其取值范围为-32768到+32767，正数比负数小1是因为其中有个0，那么16位unsigned int取值范围就是0到65535。</p>

<p>浮点型：用存储带小数部分数字的变量类型，注意这里的带小数部分数字<strong>包括指数</strong>。C++中内置的浮点数包括float、double和long double。其中float至少32位，double至少48位，且不能少于float,long double至少跟double一样多，这表明这三个类型可以相同长度，但是，通常float为32位，double为64位，long double为80、96或128位。</p>

<hr />

<h2>2.程序实例</h2>

<p>编写一个程序，要求输入地区人口数（整型）和地区面积，求单位面积人口数，分别以一下方式显示
（1）用编译器默认方式显示。
（2）取小数点后3位显示。
（3）用指数方式显示。
C++程序如下：</p>

<p>```
//01.cpp-Caculate the population density</p>

<h1>include <iostream></h1>

<h1>include <iomanip></h1>

<p>int main()
{</p>

<pre><code>using namespace std;

int population;
float area,density;

cout &lt;&lt; "Please input the population" &lt;&lt;endl;
cin &gt;&gt; population;
cout &lt;&lt; "Please input the proportion " &lt;&lt;endl;
cin &gt;&gt; area;

density = (float) population / area;

cout &lt;&lt; "The population density is " &lt;&lt; density &lt;&lt; endl;
cout &lt;&lt; "The population density is " &lt;&lt; setprecision(3) &lt;&lt; density &lt;&lt; endl;
cout &lt;&lt; "The population density is " &lt;&lt; scientific&lt;&lt;density &lt;&lt; endl;

return 0;
}
</code></pre>

<p><code>
程序结果如下：
</code>
Please input the population
12345
Please input the proportion
423
The population density is 29.1844
The population density is 29.2
The population density is 2.918e+01</p>

<hr />

<p>(program exited with code: 0)
Press return to continue
```</p>

<p>C语言程序如下：
```
//01.cpp-Caculate the population density</p>

<h1>include &lt;stdio.h></h1>

<p>int main()
{</p>

<pre><code>int population;
float area,density;

printf( "Please input the population\n" );
scanf("%d",&amp;population);
printf( "Please input the proportion \n" );
scanf("%f",&amp;area);

density = population / area;

printf( "The population density is " );
printf( "%f\n",density );

printf( "The population density is " );
printf( "%.3f\n",density );

printf( "The population density is " );
printf( "%e\n",density );


return 0;
}
</code></pre>

<p><code>
输出结果如下：
</code>
Please input the population
12345
Please input the proportion
423
The population density is 29.1844
The population density is 29.2
The population density is 2.918e+01</p>

<hr />

<p>(program exited with code: 0)
Press return to continue</p>

<p>```</p>

<hr />

<h2>3.程序分析</h2>

<p>作为第一天的学习笔记我会省略一些东西留作日后再讲，例如<code>using namespace std；</code>，首先说C跟C++共同点，都必须有main函数，main函数的作用是连接操作系统与程序，编译器会将启动代码放入main函数中，以便系统调用，启动代码就是连接系统与程序的桥梁。注意两点，其一，不管是在C还是C++中main函数必须不接受任何参数，即main（void）。其二，C++中规定main函数格式必须为<code>int main()</code>在程序的最后<code>return 0</code>，。</p>

<p>C++中格式化输出要调用I/O流控制头文件iomanip.h，以下是一些常用的格式化输出:</p>

<p>|dec |置基数为10 相当于"%d"|
|hex |置基数为16 相当于"%X"|
|oct |置基数为8 相当于"%o"|
|setfill&copy; |设填充字符为c|
|setprecision(n)  | 设显示小数精度为n位|
|setw(n) |设域宽为n个字符|
|setioflags(ios::fixed)  | 固定的浮点显示|
|setioflags(ios::scientific) |指数表示|
|setiosflags(ios::left)| 左对齐|
|setiosflags(ios::right) |右对齐|
|setiosflags(ios::skipws) |忽略前导空白|
|setiosflags(ios::uppercase) |16进制数大写输出|
|setiosflags(ios::lowercase) |16进制小写输出|
|setiosflags(ios::showpoint) |强制显示小数点|
|setiosflags(ios::showpos)   |强制显示符号|</p>

<p>C语言中的格式化输出如下：</p>

<p>C中格式字符串的一般形式为：
printf(&ldquo;%[标志][输出最小宽度][.精度][长度]类型"，变量);其中方括号[]中的项为可选项。
表示输出类型的格式字符 　　　　　 格式字符意义
a　　　　　　　　　　　　　　　　 浮点数、十六进制数字和p-计数法(C99)
A 　　　　　　　　　　　　　　　　浮点数、十六进制数字和p-计数法(C99)
c 　　　　　　　　　　　　　　　　输出单个字符
d 　　　　　　　　　　　　　　　　以十进制形式输出带符号整数
e 　　　　　　　　　　　　　　　　以指数形式输出单、双精度实数
E 　　　　　　　　　　　　　　　　以指数形式输出单、双精度实数
f 　　　　　　　　　　　　　　　　以小数形式输出单、双精度实数
g 　　　　　　　　　　　　　　　　以%f%e中较短的输出宽度输出
G 　　　　　　　　　　　　　　　　以%f%e中较短的输出宽度输出
i 　　　　　　　　　　　　　　　　有符号十进制整数(与%d相同)
o 　　　　　　　　　　　　　　　　以八进制形式输出无符号整数
p 　　　　　　　　　　　　　　　　指针
s 　　　　　　　　　　　　　　　　输出字符串
x 　　　　　　　　　　　　　　　　以十六进制形式输出无符号整数
X　　　　　　　　　　　　　　　　 以十六进制形式输出无符号整数
u 　　　　　　　　　　　　　　　　以十进制形式输出无符号整数</p>

<p>另外需要注意一点，在C和C++中，做除法运算时，两个整型量相除，出来的结果依旧是整型，例如3/4=0，若想保证输出结果为浮点需强制转换，格式为<code>（转换类型）变量</code>。</p>

<hr />

<p>今天由于练车晚上回来有点晚，笔记做的有点水希望Miss.Yang原谅，另以上纯属个人观点，欢迎大家指正，如果有什么地方令您不满，请尽快告知，鄙人会酌情判断进行修改。若修改后鄙人观点还是令您不悦——你咬我啊。(╯°Д°)╯︵ ┻━┻</p>

<hr />

<p>作业：
1.C中格式化输出的[标志]都有哪些？分别有什么用.
2.编写一个程序，要求输入汽车行驶里数（整型）和耗油量（整型），输出平均油耗，分别以以下方式显示。</p>

<pre><code>（1）保留后2位小数。
（2）保留后8位不足的用0填补（建议输入12,5）
（3）（C语言）左对齐输出长度5位，小数点后2位的指数并带正负号。
</code></pre>
]]></content>
  </entry>
  
</feed>
