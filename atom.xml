<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[曲奕帆ghost]]></title>
  <link href="http://ghostqu.github.io/atom.xml" rel="self"/>
  <link href="http://ghostqu.github.io/"/>
  <updated>2016-02-02T23:59:53+08:00</updated>
  <id>http://ghostqu.github.io/</id>
  <author>
    <name><![CDATA[ghostQu]]></name>
    <email><![CDATA[ghostqu0@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[C++学习笔记]]></title>
    <link href="http://ghostqu.github.io/blog/2016/02/02/c-plus-01/"/>
    <updated>2016-02-02T23:57:13+08:00</updated>
    <id>http://ghostqu.github.io/blog/2016/02/02/c-plus-01</id>
    <content type="html"><![CDATA[<h1>我的C++学习笔记</h1>

<p>标签（空格分隔）： C++</p>

<hr />

<p>今天开始正式步入C++的学习中，作为学习笔记，我决定采用先定义再程序再讲解讲解的方式记录，即首先我会讲解一些概念性的问题，然后用一个程序作为实力，在对程序进行讲解。</p>

<!--more-->


<hr />

<h2>1.概念与定义</h2>

<p>我们在今天的学习开始要提及一个规定：</p>

<blockquote><p>对于一个算法，可以没有输入但是不能没有输出。</p></blockquote>

<p>有些童靴可能会觉得奇怪，为什么可以没有输入但是必须有输出？原因如下，可以没有输入的原因是，我们可以在编写程序时，初始化并给某个变量赋值，并不一定要依赖于外部设备的输入；而<strong>如果我们不能知道这个程序算法运行结果如何，这个算法对我们就没有意义</strong>，所以必须要有输出，不过需要注意的是输出并不一定是显示于屏幕的字符，可以是一段声音，一个图形的移动，甚至于在单片机中某个引脚的高低变换。但是作为初学者常用的输出方式，就是在终端中显示字符。因此我们今天将提及C++中用于输入输出的函数。</p>

<p>下面阐述一个重要定义</p>

<p>变量的声明和定义，很多同学都容易把这<strong>两个</strong>概念弄混,注意是两个概念，两个呦。这个两个概念的区别在于一种是需要建立存储空间的，这个叫做“定义性声明（defining declaration）”或者称为“定义（definition）”，如int a；在声明时就已经建立了存储空间，另一种是不需要建立存储空间的，如extern int a;其中变量a是在别的程序中定义的，这个叫做“引用性声明（referncing declaration）”，当然广义来讲，声明是包括定义的，但是并非所有声明都是定义，上面的例子已经很好的说明了这个问题。</p>

<p>那么声明和定义的作用是什么？声明是为了在定义之前能够使用，这个是由编译器的特性决定的，比如说我们编写一个函数，作用是把两个变量相加，但是这个函数位于main函数之后。如果我们不提前声明的话，编译器将无法识别这个函数名导致程序无法通过编译。举个例子，某导演要拍一个电影，他可以说某几段我要做特效（声明），然后后期再把特效组的人请过来（定义），但是如果不提前告知大家这里要做特效（声明），可能剪辑组的人在不知情的情况下，就会将整个影片错误剪辑（不能正常运行）。因此，同一个变量或者函数，可以声明多次，但是只可以定义一次（毕竟只能请一个特效组）。</p>

<p>整型：C++中用于存储整数的变量类型，C++中整型包括long、unsigned long、int、unsigned int、short、unsigned short、char、unsigned char和bool。C++11中又新增了两个整型分别是long long和unsigned long long。
有趣的是C++对于这个变量类型的长度规定十分灵活，其中short必须保证两字节，即16位；int至少于short一样长；long至少四个字节，即32位且至少与int一样长；long long至少八个字节，即64位且至少与long一样长。这意味着在不同的编译器中，整型的长度可能不同，有兴趣的同学可以多装几个编译器做个实验。</p>

<p>这里需要注意的整形的取值范围，以16位int为例，其取值范围为-32768到+32767，正数比负数小1是因为其中有个0，那么16位unsigned int取值范围就是0到65535。</p>

<p>浮点型：用存储带小数部分数字的变量类型，注意这里的带小数部分数字<strong>包括指数</strong>。C++中内置的浮点数包括float、double和long double。其中float至少32位，double至少48位，且不能少于float,long double至少跟double一样多，这表明这三个类型可以相同长度，但是，通常float为32位，double为64位，long double为80、96或128位。</p>

<hr />

<h2>2.程序实例</h2>

<p>编写一个程序，要求输入地区人口数（整型）和地区面积，求单位面积人口数，分别以一下方式显示
（1）用编译器默认方式显示。
（2）取小数点后3位显示。
（3）用指数方式显示。
C++程序如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//01.cpp-Caculate the population density
</span><span class='line'>#include &lt;iostream&gt;
</span><span class='line'>#include &lt;iomanip&gt;
</span><span class='line'>
</span><span class='line'>int main()
</span><span class='line'>{
</span><span class='line'>  using namespace std;
</span><span class='line'>  
</span><span class='line'>  int population;
</span><span class='line'>  float area,density;
</span><span class='line'>  
</span><span class='line'>  cout &lt;&lt; "Please input the population" &lt;&lt;endl;
</span><span class='line'>  cin &gt;&gt; population;
</span><span class='line'>  cout &lt;&lt; "Please input the proportion " &lt;&lt;endl;
</span><span class='line'>  cin &gt;&gt; area;
</span><span class='line'>  
</span><span class='line'>  density = (float) population / area;
</span><span class='line'>  
</span><span class='line'>  cout &lt;&lt; "The population density is " &lt;&lt; density &lt;&lt; endl;
</span><span class='line'>  cout &lt;&lt; "The population density is " &lt;&lt; setprecision(3) &lt;&lt; density &lt;&lt; endl;
</span><span class='line'>  cout &lt;&lt; "The population density is " &lt;&lt; scientific&lt;&lt;density &lt;&lt; endl;
</span><span class='line'>  
</span><span class='line'>  return 0;
</span><span class='line'>  }
</span></code></pre></td></tr></table></div></figure>


<p>程序结果如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Please input the population
</span><span class='line'>12345
</span><span class='line'>Please input the proportion 
</span><span class='line'>423
</span><span class='line'>The population density is 29.1844
</span><span class='line'>The population density is 29.2
</span><span class='line'>The population density is 2.918e+01
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>------------------
</span><span class='line'>(program exited with code: 0)
</span><span class='line'>Press return to continue</span></code></pre></td></tr></table></div></figure>


<p>C语言程序如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//01.cpp-Caculate the population density
</span><span class='line'>#include &lt;stdio.h&gt;
</span><span class='line'>
</span><span class='line'>int main()
</span><span class='line'>{ 
</span><span class='line'>  
</span><span class='line'>  int population;
</span><span class='line'>  float area,density;
</span><span class='line'>  
</span><span class='line'>  printf( "Please input the population\n" );
</span><span class='line'>  scanf("%d",&population);
</span><span class='line'>  printf( "Please input the proportion \n" );
</span><span class='line'>  scanf("%f",&area);
</span><span class='line'>  
</span><span class='line'>  density = population / area;
</span><span class='line'>  
</span><span class='line'>  printf( "The population density is " );
</span><span class='line'>    printf( "%f\n",density );
</span><span class='line'>    
</span><span class='line'>    printf( "The population density is " );
</span><span class='line'>    printf( "%.3f\n",density );
</span><span class='line'>    
</span><span class='line'>    printf( "The population density is " );
</span><span class='line'>    printf( "%e\n",density );
</span><span class='line'>
</span><span class='line'>  
</span><span class='line'>  return 0;
</span><span class='line'>  }
</span></code></pre></td></tr></table></div></figure>


<p>输出结果如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Please input the population
</span><span class='line'>12345
</span><span class='line'>Please input the proportion 
</span><span class='line'>423
</span><span class='line'>The population density is 29.1844
</span><span class='line'>The population density is 29.2
</span><span class='line'>The population density is 2.918e+01
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>------------------
</span><span class='line'>(program exited with code: 0)
</span><span class='line'>Press return to continue
</span><span class='line'>    </span></code></pre></td></tr></table></div></figure>


<hr />

<h2>3.程序分析</h2>

<p>作为第一天的学习笔记我会省略一些东西留作日后再讲，例如<code>using namespace std；</code>，首先说C跟C++共同点，都必须有main函数，main函数的作用是连接操作系统与程序，编译器会将启动代码放入main函数中，以便系统调用，启动代码就是连接系统与程序的桥梁。注意两点，其一，不管是在C还是C++中main函数必须不接受任何参数，即main（void）。其二，C++中规定main函数格式必须为<code>int main()</code>在程序的最后<code>return 0</code>，。</p>

<p>C++中格式化输出要调用I/O流控制头文件iomanip.h，以下是一些常用的格式化输出:</p>

<blockquote><p>dec 置基数为10 相当于&#8221;%d&#8221;
hex 置基数为16 相当于&#8221;%X&#8221;
oct 置基数为8 相当于&#8221;%o&#8221;
setfill&copy; 设填充字符为c
setprecision(n)   设显示小数精度为n位
setw(n) 设域宽为n个字符
setioflags(ios::fixed)   固定的浮点显示
setioflags(ios::scientific) 指数表示
setiosflags(ios::left) 左对齐
setiosflags(ios::right) 右对齐
setiosflags(ios::skipws) 忽略前导空白
setiosflags(ios::uppercase) 16进制数大写输出
setiosflags(ios::lowercase) 16进制小写输出
setiosflags(ios::showpoint) 强制显示小数点
setiosflags(ios::showpos)   强制显示符号</p></blockquote>

<p>C语言中的格式化输出如下：</p>

<p>C中格式字符串的一般形式为：
printf(&ldquo;%[标志][输出最小宽度][.精度][长度]类型&#8221;，变量);其中方括号[]中的项为可选项。
表示输出类型的格式字符 　　　　　 格式字符意义
a　　　　　　　　　　　　　　　　 浮点数、十六进制数字和p-计数法(C99)
A 　　　　　　　　　　　　　　　　浮点数、十六进制数字和p-计数法(C99)
c 　　　　　　　　　　　　　　　　输出单个字符
d 　　　　　　　　　　　　　　　　以十进制形式输出带符号整数
e 　　　　　　　　　　　　　　　　以指数形式输出单、双精度实数
E 　　　　　　　　　　　　　　　　以指数形式输出单、双精度实数
f 　　　　　　　　　　　　　　　　以小数形式输出单、双精度实数
g 　　　　　　　　　　　　　　　　以%f%e中较短的输出宽度输出
G 　　　　　　　　　　　　　　　　以%f%e中较短的输出宽度输出
i 　　　　　　　　　　　　　　　　有符号十进制整数(与%d相同)
o 　　　　　　　　　　　　　　　　以八进制形式输出无符号整数
p 　　　　　　　　　　　　　　　　指针
s 　　　　　　　　　　　　　　　　输出字符串
x 　　　　　　　　　　　　　　　　以十六进制形式输出无符号整数
X　　　　　　　　　　　　　　　　 以十六进制形式输出无符号整数
u 　　　　　　　　　　　　　　　　以十进制形式输出无符号整数</p>

<p>另外需要注意一点，在C和C++中，做除法运算时，两个整型量相除，出来的结果依旧是整型，例如3/4=0，若想保证输出结果为浮点需强制转换，格式为<code>（转换类型）变量</code>。</p>

<hr />

<p>今天由于练车晚上回来有点晚，笔记做的有点水希望Miss.Yang原谅，另以上纯属个人观点，欢迎大家指正，如果有什么地方令您不满，请尽快告知，鄙人会酌情判断进行修改。若修改后鄙人观点还是令您不悦——你咬我啊。(╯°Д°)╯︵ ┻━┻</p>

<hr />

<p>作业：
1.C中格式化输出的[标志]都有哪些？分别有什么用.
2.编写一个程序，要求输入汽车行驶里数（整型）和耗油量（整型），输出平均油耗，分别以以下方式显示。</p>

<pre><code>（1）保留后2位小数。
（2）保留后8位不足的用0填补（建议输入12,5）
（3）（C语言）左对齐输出长度5位，小数点后2位的指数并带正负号。
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于编程的二三事]]></title>
    <link href="http://ghostqu.github.io/blog/2016/01/30/he-yang-xiao-jie-yi-qi-de-c-plus-plus-xue-xi-ri-ji/"/>
    <updated>2016-01-30T20:37:43+08:00</updated>
    <id>http://ghostqu.github.io/blog/2016/01/30/he-yang-xiao-jie-yi-qi-de-c-plus-plus-xue-xi-ri-ji</id>
    <content type="html"><![CDATA[<h2>0.缘起</h2>

<p>各位看官大家好，这里是悠悠曲。大约一个星期之前，我跟杨小姐决定开展一个暑期C语言和C++的学习计划，并约定每天都要做编程的学习笔记。因此，在正式的进入学习状态之前，我想先谈谈闲篇，包括编程对于我们是什么，有什么意义以及对新手来说正确的编程思路是什么。</p>

<!--more-->


<hr />

<h2>1.什么是程序?</h2>

<p>什么是程序？根据维基百科：</p>

<blockquote><p>A computer program is a collection of instructions that performs a specific task when executed by a computer. A computer requires programs to function, and typically executes the program&rsquo;s instructions in a central processing unit.</p></blockquote>

<p>程序是计算机执行任务时候需要的一系列指令。计算机为实现某项功能，需要程序来指引，即在核心进程单元中执行程序指令。形象一点说，把计算机想象成一个智商有很大的缺陷的人，他生理缺陷非常严重，甚至于我们说：“拿杯水过来。”他都做不到，我们必须命令他：“往前走两步，手掌伸开，把手臂放下三厘米，手掌握住，后退两步。”他才能把水给你。那么，在这个例子中，我们给他下达的这一系列命令就是程序。当然，鄙人也有自己的定义，将会在后面给给位看官细细解释。</p>

<hr />

<h2>2.为什么要学习编程？</h2>

<p>那么，我们需要学习如何编写程序吗？我的答案是<strong>“yes”</strong>。</p>

<p>衡量一件事物是否有价值就要看它被社会的接受程度，当某件事物成为大部分人的日常用品，就说明这件事物有极大的重要性。所以，首先，我们要从普及性来讲，很多人都知道电脑，手机需要程序支持<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>，可是很少有人意识到除开这两样设备，程序依然贯穿于我们的生活之中，微波炉，洗衣机，ATM机，电视机顶盒，电子门禁，几乎涵盖了我们生活的各种方面。我可以说如果有一天世界上所有电子设备中的程序都被抹除，那么有些人一天也活不下去。</p>

<p>其次，编写程序有什么意义？我知道这时候有些人会说：“那又怎么样，我只要会用就行了，会写程序现实生活也用不上。”在此，我要提及前几天在驾校遇到的事情:<strong>有人给我出了这样一个题目，一堆鸡蛋，一个一个拿正好拿完，两个两个拿还剩一个，三个三个拿正好拿完，四个四个拿还剩一个，五个五个拿还剩四个，六个六个拿还剩三个，七个七个拿还剩五个，八个八个拿还剩一个，九个九个拿正好拿完，求一万以内的所有可能解。</strong>你会用多长时间来解决这个题目呢？实话是我用了一个上午都没有做出来，作为一个工科生，十分挫败。可是工科生难道不应该用工科生的方式解决问题吗？一个程序解决了所有问题，用时3分11秒，这就是程序的意义。</p>

<p>更何况，编程程序所用到的一些思路在解决其他问题时依旧好用，比如说我们常用的<code>自顶向下</code>方法，即将大问题分解为相对简单的小问题，找出每个问题的关键、重点所在，然后解决问题。这种方法在处理那些你一下子摸不到头绪的问题时特别好用，核心在于它将问题分解了。比如说，我们要造一台跑车，可是我们从未有过相关的知识，因此也不知从何着手。那么，按照自顶向下的方法，把问题拆解，看看会不会变得简单。首先，跑车分为外壳，底盘和机械部分，然后，外壳分为扒拉扒拉，底盘分为巴拉巴拉，机械部分分为变速箱，发动机，传动装置等。然后发送机分为汽缸头，活塞等。我相信到这一步网络上一定有很多资料可以供你参考。<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>由此可见程序的思想在日常生活中也会起到很大作用，本质上程序就是源于生活，是思想的一种表达方式，因此回归于生活也不是什么稀奇事。</p>

<hr />

<h2>3.为什么你不愿意编程？</h2>

<p>事实上，即便如此，许多人还是不愿意学习编程。很多人都接触过编程或者说不得不接触编程，C语言是大学的一个必修课，很多专业学院也必须要接触与编程相关的科目。但是有些有编程应用专业的学生依然不情愿去编程。我们常常能看到以下问题。</p>

<p>1.编程好难啊，编程需要很强的逻辑思维，我逻辑思考能力差，所以不适合编程。</p>

<p>很有意思的观点，而且是绝大部分的人都会这么认为的。但是，事实就是这样吗？编程真的是逻辑思维强的人才能驾驭的吗？其实不然，还记得在那个例子吗？计算机本身没有思考能力，程序就是它需要执行的指令。那么这个指令来自于哪里呢？来源于人。所以这里给出我对程序的定义，程序是人思想的一部分，即把自己的思维描述出来，然后灌输给计算机，本质上，每一个你编写的程序在某种程度上相当于你的分身。这跟逻辑思维<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>毫无关联，我们不需要去推理什么，大部分情况下，我们只需要将自身的思考过程用程序的语言描述出来就可以了，与其说是逻辑思维还不如是惯性思维或者说是表述能力。所以，以平均水平的逻辑思考能力就足以应付绝大部分的情况<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>，只需要你记住编写程序需要的语法和关键字。</p>

<p>2.编程好无聊啊，要记得各种各样的关键字，语句。而且一点都不好玩。</p>

<p>的确，学习编程初期是一个很枯燥的过程，需要死板的记忆。然而，当你掌握了基本规则之后，就会发现编程是一项很有趣的活动。为什么我会这么说？因为编程可以满足人们心理上的诸多渴求，包括支配欲，倾诉欲，占有欲等<sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup>。编程就像在沙滩上堆沙堡，画纸上作画，钢琴上演奏，是一种灵感的迸发，是一种思维的表达，是一种创作欲的倾泻。当然，这个可能过于抽象，具体一点说，你有想过用程序做什么吗？有想过用自己编写一个桌面导航吗？或者做一个siri？或者研究下底层软件，做一个四轴飞行器？总之，当程序本身有了意义，你就会发现编程的乐趣。</p>

<hr />

<h2>4.编程的思路是什么？</h2>

<p>编程其实是一个逐渐细化的过程，很多对编程束手无策的人其实是没有意识到这一点。对于新手而言，不要一开始就期望编写出最符合预期的程序，而是应该像做一个雕刻一样，凿出一个轮廓然后，逐渐完成细节的优化。我们以鸡蛋的程序作为例子。</p>

<blockquote><p>一堆鸡蛋，一个一个拿正好拿完，两个两个拿还剩一个，三个三个拿正好拿完，四个四个拿还剩一个，五个五个拿还剩四个，六个六个拿还剩三个，七个七个拿还剩五个，八个八个拿还剩一个，九个九个拿正好拿完，求一万以内的所有可能解。</p></blockquote>

<p>我相信很多在大学学过C语言并且考过计算机二级的人都不会觉得这个题目很难，但是，我相信60%以上的人写出的程序会是这个样子：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#include &lt;stdio.h&gt;
</span><span class='line'>
</span><span class='line'>int main()
</span><span class='line'>{
</span><span class='line'>    int eggs;
</span><span class='line'>    for (eggs=0;eggs&lt;10000;egg++)
</span><span class='line'>    {
</span><span class='line'>        if(eggs%2==1)
</span><span class='line'>          {
</span><span class='line'>            if(eggs%3==0)
</span><span class='line'>            {
</span><span class='line'>                if(eggs%4==1)
</span><span class='line'>                {
</span><span class='line'>                    if(eggs%5==4)
</span><span class='line'>                    {
</span><span class='line'>                        if(eggs%6==4)
</span><span class='line'>                        {
</span><span class='line'>                            if(eggs%7==5)
</span><span class='line'>                            {
</span><span class='line'>                                if(eggs%8==1)
</span><span class='line'>                                {
</span><span class='line'>                                    if(eggs%9==0)
</span><span class='line'>                                    {
</span><span class='line'>                                        printf("%d\n",eggs);
</span><span class='line'>                                    }
</span><span class='line'>                                }
</span><span class='line'>                            }
</span><span class='line'>                        }
</span><span class='line'>                    }
</span><span class='line'>                }
</span><span class='line'>            }
</span><span class='line'>         }
</span><span class='line'>    }
</span><span class='line'>    return 0;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>事实上，这个程序完全没有问题，语法结构是正确的，运算结果是正确的，可是问题在于它长了，我说的长不光指这个程序有35行之多，更在于它在<strong>算法的时间复杂度</strong>上的长。不过对于新手而言这个完全OK，可是很多人预期不是这样的，他们期望一个简短的结果，在编写这个长串版本的代码时他们觉得很麻烦，而且长意味容易出错，可能细小的疏忽造成的ERROR使程序无法运行，以至于造成一种程序很难的假象。下面我们对程序进行精简。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#include &lt;stdio.h&gt;
</span><span class='line'>
</span><span class='line'>int main()
</span><span class='line'>{
</span><span class='line'>    int eggs;
</span><span class='line'>    for(eggs=0;eggs&lt;10000;eggs++)
</span><span class='line'>    {
</span><span class='line'>        if(eggs%2==1 && eggs%3==0 && eggs%4==1 && eggs%5==4 && 
</span><span class='line'>           eggs%6==4 && eggs%7==5 && eggs%8==1 && eggs%9==0)
</span><span class='line'>        {
</span><span class='line'>         printf("%d\n",eggs);
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>    return 0;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>精简过后的程序只剩15行，相信已经可以满足很多人的需要了，我们也可以看出这些程序完全没有用到逻辑思维能力，相信到这一步大家也可以满意了。往下简化就需要逻辑思维能力了，作为一个只有一个变量的程序从程序的空间复杂度上已经很难精简，只能继续从时间复杂复杂度上着手。简化如下。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#include &lt;stdio.h&gt;
</span><span class='line'>
</span><span class='line'>int main()
</span><span class='line'>{
</span><span class='line'>    int eggs;
</span><span class='line'>    for(eggs=9;eggs&lt;10000;eggs+=10)
</span><span class='line'>    {
</span><span class='line'>        if(eggs%4==1 && eggs%6==4 && eggs%7==5 && eggs%8==1 && eggs%9==0)
</span><span class='line'>        {
</span><span class='line'>         printf("%d\n",eggs);
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>    return 0;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>这个程序比上一在时间复杂度上简化了10倍，这是因为由条件2和5可知所求数尾数为9，只需要每次加10保持尾数不变即可。由此可见，其实编程的思想就是这样由浅入深的，先是最简单的机械重复和描述，然后精简，最后加上一些推理。</p>

<p>那么，从下期开始就开始正式的C语言学习笔记了，在此之前，留下几个问题：
1.什么是程序的可移植性？
2.程序分为编译型和解释型，它们有什么区别？
3.什么是程序的时间负载度和空间复杂的？</p>

<hr />

<h4><strong>特别提醒:</strong></h4>

<p>以上纯属个人观点，欢迎大家指正，如果有什么地方令您不满，请尽快告知，鄙人会酌情判断进行修改。若修改后鄙人观点还是令您不悦——你咬我啊。(╯°Д°)╯︵ ┻━┻</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>虽然我认为电脑和手机已经可以说明问题了。<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>其实这个例子还有一个蒸包子版本，把包子分为面皮和馅料，面皮分为面粉量，水量，酵母量，发酵时间；馅料分为，菜肉比，预处理方式，调料量。但是这个版本是不是有点太简单了，毕竟我会蒸包子，可是我不会造跑车。<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>逻辑思维是人的理性认识阶段，人运用概念、判断、推理等思维类型反映事物本质与规律的认识过程。它强调的是人的推理判断能力。<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
<li id="fn:4">
<p>少部分情况是指你需要对程序的空间复杂度和时间复杂度进行大量精简时。<a href="#fnref:4" rev="footnote">&#8617;</a></p></li>
<li id="fn:5">
<p>我承认这么说是有点夸张了。<a href="#fnref:5" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ 用git+github+octopress搭设博客]]></title>
    <link href="http://ghostqu.github.io/blog/2014/05/27/yong-git-plus-github-plus-octopressda-she-bo-ke/"/>
    <updated>2014-05-27T23:25:29+08:00</updated>
    <id>http://ghostqu.github.io/blog/2014/05/27/yong-git-plus-github-plus-octopressda-she-bo-ke</id>
    <content type="html"><![CDATA[<p>既然我答应大家要给大家一个<a href="http://github.com/">github</a>+<a href="http://octopress.org/">octopress</a>的教程，那么我就要说话算数，嗯，好吧那么下面给大家上步骤：</p>

<!--more-->


<h2>1.申请github账号，并建好respository</h2>

<ul>
<li>要用github做博客，那么我们需要一个<a href="http://github.com/">github</a>的账号，那么这个注册还是很简单的，只要照着这个图填好即可。
<a href="" target="_blank"><img src="http://ghostqu.github.io/images/github.png"/></a></li>
<li>然后回到<a href="http://github.com/">github</a>页面，点击图中第2个图标respository。
<a href="" target="_blank"><img src="http://ghostqu.github.io/images/respositority.png"/></a></li>
<li>这时候会弹出这样一个页面，我们只需要按照<strong> username.github.io </strong>来填写进项目名称，这样github会给生成一个静态的托管页面，供我们搭建博客。
<a href="" target="_blank"><img src="http://ghostqu.github.io/images/new.png"/></a>
<strong>这里需要注意一点，上面的username一定要是你自己的用户名，而且要求是全部是小写<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>。</strong>用户名里有大写的童鞋可以注销账号重新申请了。</li>
</ul>


<hr />

<h2>2.安装ssh和git，并进行github的配置</h2>

<p>在这里我先提一下我用的是ubuntu 14.04 LTS这是一个linux内核的系统，所以我们使用git就能方便的在github上进行pull或push的操作，使用<strong>温妻</strong>的同学可以自己在网上找一下教程<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>。</p>

<ul>
<li>安装过程很简单，只需要打开终端，输入</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$sudo</span> apt-get install git
</span><span class='line'><span class="nv">$sudo</span> apt-get install ssh
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>github需要我们提供ssh密匙，首先要确定系统中是否已存密匙，在终端输入以下命令。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$cd</span> ~/.ssh
</span><span class='line'><span class="nv">$ls</span> -al
</span></code></pre></td></tr></table></div></figure>


<p>如果，你的终端中显示有<code>id_rsa.pub</code>或者<code>id_dsa.pub</code>那么说明你已经有密匙了。
* 如果没有密匙，那么需要生成，终端输入</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ssh</span>-kengen -t ras -C <span class="s2">&quot;your_email@nidongde.com&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>确保自己没有输错的话，就一路enter，直到终端上显示类似</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>The key fingerprint is:
</span><span class='line'>11:11:11:.................................
</span></code></pre></td></tr></table></div></figure>


<p>此时，向终端输入</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ssh</span>-add ~/.ssh/id_rsa
</span></code></pre></td></tr></table></div></figure>


<p>这样我们就有了一个ssh密匙，接下来要把密匙加进github中。首先，无所谓用<code>gedit</code>还是<code>gvim</code>或者是<code>open office</code>打开<code>～/.ssh/id_rsa.pub</code>，将里面的内容<code>Ctrl+C</code>下来，接着点击github页面右上角的Account settings，即图中第二个图标。
<a href="" target="_blank"><img src="http://ghostqu.github.io/images/set.png"/></a>
选择SSH keys，点击Add SSH key。将你刚才复制下来的东西统统<code>Ctrl+V</code>进<strong>Key</strong>里面。
<a href="" target="_blank"><img src="http://ghostqu.github.io/images/key.png"/></a>
至于那个titile随便填个什么就好，甚至不填都没有问题。</p>

<ul>
<li>在git上配置好用户名和邮箱以便登陆，简简单单的在终端输入一下命令就好</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$git</span> config --global user.name <span class="s2">&quot;Your Name Here&quot;</span>
</span><span class='line'><span class="nv">$git</span> config --global user.email <span class="s2">&quot;your_email@example.com&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意上面就是你<strong>注册github时用的用户名和邮箱</strong>千万不要填错了
+ 最后，测试一下好不好用，终端输入</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ssh</span> -T git@github.com
</span></code></pre></td></tr></table></div></figure>


<p>第一次连的时候可能还要问你是不是想访问之类的问题，不管它，直接yes，如果输出类似</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Hi ghostqu! You<span class="err">&#39;</span>ve successfully authenticated, but GitHub does not provide shell access.
</span></code></pre></td></tr></table></div></figure>


<p>就说明你访问成功了。</p>

<hr />

<h2>3.安装Octopress</h2>

<p>如果大家对自己英文水平有自信可以直接访问<a href="http://octopress.org/">Octopress</a>的主页，因为接下来的东西基本我就是做了个翻译。</p>

<p>*首先利用git命令把octopress克隆到主机上</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git clone git://github.com/imathis/octopress.git octopress
</span><span class='line'><span class="nb">cd </span>octopress    <span class="c"># If you use RVM, You&#39;ll be asked if you trust the .rvmrc file (say yes).</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>接着安装依赖项</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gem install bundler
</span><span class='line'>rbenv rehash    <span class="c"># If you use rbenv, rehash to be able to run the bundle command</span>
</span><span class='line'>bundle install
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>最后安装默认主题</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rake install
</span></code></pre></td></tr></table></div></figure>


<p><strong>注意我这里系统自带了ruby，如果没有这个的同学要自己安装，具体请参考<a href="http://octopress.org/docs/setup/rbenv/">Installing Ruby With Rbenv</a></strong></p>

<hr />

<h2>4.配置Octopress</h2>

<p>其实在这里Octopress的作者真的很贴心，我们需要改的东西真心不多。打开octopress文件夹下的<code>_config.yml</code>
+ 该文件中的<code>url</code>是必须要填写的，这里的<code>url</code>是在<a href="http://github.com/">github</a>上的页面地址，就是那个<code>username.github.io</code>
+ 另外再修改一下title、subtitle和author，就是你博客的名字，博客的副标题<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>，还有你的名字啦
+ 觉得改这些还是不够，想多改改的同学参见<a href="http://octopress.org/docs/configuring/">官网教程</a><sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup></p>

<hr />

<h2>5.将博客上传到github上</h2>

<p>我们需要利用<code>octopress</code>的一个配置<code>rake</code>任务来自动配置上面创建的仓库：可以让我们方便的部署GitHub page。在终端输入如下命令：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rake setup_github_pages
</span></code></pre></td></tr></table></div></figure>


<p>上面的命令会做一些事情。其中最主要的就是创建一个_deploy目录，目录用来存放部署到master分支的内容。期间会要求你输入仓库的url，根据提示，进行输入即可。
完成上面的命令之后，我们就可以生成博客并真正的部署到仓库中了。执行如下命令：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rake generate
</span><span class='line'>rake deploy
</span></code></pre></td></tr></table></div></figure>


<p>上面的命令首先生成博客文件，并将生成的博客文件拷贝到_deploy/目录下，然后将这些内容添加到git中，并commit和push到仓库的master分支。
现在可以访问<code>http://username.github.com</code>了。
注意：有时候可能会有延时，要等几分钟才能打开。
至此，我们的博客已经完成基本的部署，不过博客的source需要单独提交，执行如下命令就可以将source提交到仓库的source分支下。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$git</span> add .
</span><span class='line'><span class="nv">$ </span>git commit -m <span class="s1">&#39;Initial source commit&#39;</span>
</span><span class='line'><span class="nv">$ </span>git push origin <span class="nb">source</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果在部署到仓库之前，需要先预览一下博客，可以在终端输入<code>rake preview</code>命令，然后就能在浏览器中进行本地预览访问了<code>http://127.0.0.1:4000/</code>或<code>http://localhost:4000/</code>，效果跟上传到<code>github</code>中的一样。</p>

<hr />

<h2>6.发表新博文</h2>

<p>我们需要调用octopress给我们的命令</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rake new_post<span class="o">[</span><span class="s2">&quot;title&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>会让我们输入博客的题目什么的，生成的博文在<code>source/_post</code>下，以<code>日期-题目.markdown</code>命名，我们需要一个markdown编辑器即可，目前我用的是<code>retext</code>，推荐一个网页版<a href="https://www.zybuluo.com/mdeditor"><code>cmdMarkdown</code></a>
然后上传文件</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rake generate
</span><span class='line'><span class="nv">$ </span>git add .
</span><span class='line'><span class="nv">$ </span>git commit -am <span class="s2">&quot;Some comment here.&quot;</span>
</span><span class='line'><span class="nv">$ </span>git push origin <span class="nb">source</span>
</span><span class='line'><span class="nv">$ </span>rake deploy
</span></code></pre></td></tr></table></div></figure>


<p>当然，在上传之前<sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup>你依旧可以使用<code>rake preview</code>预览页面。</p>

<p>第二次写博客，依旧猴累猴累的，不过还是能坚持。</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>我就是这么被坑了，一开始用户名是ghostQu，结果死活不生成页面。<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>Google is your good friend.<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>就是我博客名字下面那个Ever learning，never end啦。<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
<li id="fn:4">
<p>只不过是全英文的。<a href="#fnref:4" rev="footnote">&#8617;</a></p></li>
<li id="fn:5">
<p>即rake generate之后<a href="#fnref:5" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[为什么我要写博客]]></title>
    <link href="http://ghostqu.github.io/blog/2014/05/26/wei-shi-yao-wo-yao-xie-bo-ke/"/>
    <updated>2014-05-26T01:13:04+08:00</updated>
    <id>http://ghostqu.github.io/blog/2014/05/26/wei-shi-yao-wo-yao-xie-bo-ke</id>
    <content type="html"><![CDATA[<h2>目录</h2>

<ul>
<li>序章</li>
<li>0.Why Bloging</li>
<li>1.Why Octopress</li>
<li>2.My Spirit</li>
<li>3.My Expection</li>
</ul>


<!--more-->


<h2>序章</h2>

<p>按照惯例，每一个用<a href="http://octopress.org/">Octopress</a>写博客的人第一篇博文都是要讨论Octopress，那么我也不能例外，虽然懂的不是太多，也写不了太多，但是也要啰嗦两句。</p>

<hr />

<h2>0.Why Bloging</h2>

<p>很早就有要记录一点东西的想法，但是时间零零碎碎，想法松松散散，实在是不忍心贴出来玷污各位看官的眼睛。看过了刘未鹏的<a href="http://mindhacks.cn/2009/02/15/why-you-should-start-blogging-now/">《为什么你应该（从现在开始）写博客》</a>，又觉得既然已经过了每个二逼青年都应该变正常的22岁，不留下点东西给以后参阅，实乃人生一大憾事。<strong>所以写吧，把零零碎碎的想法归纳整理,留给以后参阅。</strong></p>

<hr />

<h2>1.Why Octopress</h2>

<p>说实话，决定用Octopress搭设博客时确实有点脸红，人家明明白白写了<code>A bloging framework for hakers</code>我自认还不能称之为一名骇客。但是我是很向往骇客的那种<strong>追求自由</strong>的精神，所以就恬不知耻的用了Octopress。当然，好东西要大家分享，稍后几天我会整理一下如何用<code>git+github+octopress</code>搭设自己的博客，敬请各位看官期待。</p>

<hr />

<h2>2.My Spirit</h2>

<p>说了追求骇客精神，就要表一下我是一个什么状态，为什么要去追求这种精神,自嘲一点的说，我是一个<strong>好玩</strong>的人，这里这个“好”读四声，不是说我人幽默或者是有趣，而是说我喜欢玩，看到有趣的东西就想插一脚，给这个特点做一个自我评定，有好也有坏；如果我不是这么一个好玩的人，可能各位看官就看不到我现在的博客了，但是又因为我是这么一个好玩的人，做什么事情又都没有什么定性，很有可能多年以后我翻出了这个博客，才发现只有这么一篇文字，然后背地里暗暗脸红，更甚于恼羞成怒删除博客。不过，既然在这里写了，那么对自己还是有点期望的，期望自己能坚持下去，期望自己能收获结果，希望多年之后我这个<a href="http://ghostqu.github.io">曲奕帆ghost&rsquo;s Blog</a>能繁荣向上,开花结果。所以，欢迎大家跟我<del>一起玩下去</del><sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>，啊，不，是跟我一起努力下去。</p>

<hr />

<h2>3.My Expection</h2>

<p>介绍了自己的性格，就聊聊对自己的期望，对未来的梦想吧。不知各位看管注意到我侧边栏副标题吗？ <strong>Ever learning,never end.</strong>
这句话原版是《新约·提摩太后书》第3章第7节：</p>

<blockquote><p>Ever learning, and never able to come to the knowledge of the truth.</p>

<p>终日而学，然不得事物之真理。</p></blockquote>

<p>自认为很适合用来形容当前的我，接触了很多事物，也学到了很多，然而玩心太重，终没有一样精通，所以我把这句话改成了学无止境，希望自己能从各种各样好玩的有趣的事物中挑选出哪一种最适合的，研究透彻，才能继续在别的道路上越走越好。</p>

<p>说实话，第一次写博客，突然发现组织文字也不是一件轻松的活。</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>大雾，这是口胡了<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
</feed>
